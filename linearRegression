import pandas as pd
from sklearn import linear_model
import matplotlib.pyplot as plt 
#一元线性回归
file1 = 'C:/Users/Administrator/Desktop/数据-线性回归-火灾.xlsx'   #数据路径
data1 = pd.read_excel(file1)                                       #读入excel文件
print(data1)
# 散点图
plt.scatter(data1['距离消防站（km）'], data1['火灾损失（千元）'], color='blue')
plt.show()
# 建立线性回归模型
regr = linear_model.LinearRegression()
model1=regr.fit(data1['距离消防站（km）'].reshape(-1,1), data1['火灾损失（千元）'].reshape(-1,1))  # reshape(-1, 1)，变成一维的！
# 回归直线图
plt.scatter(data1['距离消防站（km）'], data1['火灾损失（千元）'], color='blue')
plt.plot(data1['距离消防站（km）'], regr.predict(data1['距离消防站（km）'].reshape(-1,1)), color='red', linewidth=4)
plt.show()
print("回归斜率",regr.coef_)          # 直线的斜率
print("回归截距",regr.intercept_)     # 直线的截距

x1 = 3.5                              # 给出待预测面积
print("预测值",regr.predict(x1))     # 根据predict方法预测

import numpy as np
import pandas as pd
from sklearn import linear_model
from sklearn.model_selection import train_test_split
import matplotlib as mpl   
import matplotlib.pyplot as plt 
from mpl_toolkits.mplot3d import Axes3D
import seaborn as sns

#多元线性回归
file1 = 'C:/Users/Administrator/Desktop/数据-线性回归-年薪.xls'   #数据路径
data1 = pd.read_excel(file1)                                       #读入excel文件
#print(data1)
#画图
mpl.rcParams['font.sans-serif'] = ['SimHei']     #配置显示中文，否则乱码
mpl.rcParams['axes.unicode_minus']=False        #用来正常显示负号，如果是plt画图，则将mlp换成plt
sns.pairplot(data1, x_vars=['开始年薪','工作时间','工作经验','受教育年限'], y_vars='年薪', kind="reg",size=5, aspect=0.7)
plt.show()
#数据拆分
x=data1.loc[:,('开始年薪','工作时间','工作经验','受教育年限')]
y=data1.loc[:,'年薪']
x_train,x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=100)
# 建立线性回归模型
regr = linear_model.LinearRegression()
model1=regr.fit(x_train, y_train)
print("回归斜率",regr.coef_)          # 直线的斜率
print("回归截距",regr.intercept_)     # 直线的截距
#预测
y_pred = regr.predict(x_test)
print (y_pred) 
#均方误差
sum_mean=0
for i in range(len(y_pred)):
    sum_mean+=(y_pred[i]-y_test.values[i])**2
sum_erro=np.sqrt(sum_mean/len(y_pred)) 
print ("均方误差:",sum_erro)
#做ROC曲线
plt.figure()
plt.plot(range(len(y_pred)),y_pred,'b',label="predict")
plt.plot(range(len(y_pred)),y_test,'r',label="test")
plt.legend(loc="upper right")       #显示图中的标签
plt.xlabel("the number of sales")
plt.ylabel('value of sales')
plt.show()

#使用statsmodels包
import pandas as pd
from statsmodels.formula.api import ols    #最小二乘回归
#一元线性回归
file1 = 'C:/Users/Administrator/Desktop/数据-线性回归-火灾.xlsx'   #数据路径
data1 = pd.read_excel(file1)                                       #读入excel文件
data1.columns=['index','x','y']                                    #修改列名
model = ols('y~x', data1).fit()
print(model.summary())

#使用statsmodels包
import pandas as pd
from statsmodels.formula.api import ols
#多元线性回归
file1 = 'C:/Users/Administrator/Desktop/数据-线性回归-年薪.xls'    #数据路径
data1 = pd.read_excel(file1)                                       #读入excel文件
data1.columns=['y','x1','x2','x3','x4','x5']                       #修改列名
model = ols('y~x1+x2+x3+x4', data1).fit()
print(model.summary())
model = ols('y~x1+x4', data1).fit()
print(model.summary())
print("参数",model.params)
